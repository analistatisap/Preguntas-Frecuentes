"""
Django settings for Preguntas_frecuentes project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
from pathlib import Path
import os
from dotenv import load_dotenv
from django_auth_ldap.config import LDAPSearch, GroupOfNamesType # Necesitamos GroupOfNamesType ahora
import logging
import ldap

load_dotenv()

BASE_DIR = Path(__file__).resolve().parent.parent

DEBUG = os.environ.get('DJANGO_DEBUG', 'False') == 'True'
SECRET_KEY = os.environ.get('SECRET_KEY')
ALLOWED_HOSTS = ['*']

EMAIL_HOST_USER = 'notificacionesaplicativoweb@grupodecor.com'
EMAIL_HOST_PASSWORD = '1Ngr3s0W3b2024*'
DEFAULT_FROM_EMAIL = 'notificacionesaplicativoweb@grupodecor.com'


# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'contacto',
    'corsheaders',
    'rest_framework_simplejwt',
    'django_auth_ldap',
    'recursos',
    'api',
    'rest_framework',
    'rest_framework.authtoken',
]

# Configuración de CORS
CORS_ALLOWED_ORIGINS = [
    '*'
]

# Configuraciones adicionales de CORS
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_ALL_ORIGINS = True  # Solo para desarrollo
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'Preguntas_frecuentes.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Preguntas_frecuentes.wsgi.application'

# Seguridad para producción
SECURE_HSTS_SECONDS = 31536000
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True
SECURE_SSL_REDIRECT = False
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True

# Configuración de base de datos para PostgreSQL (ajustar en el paso 3)
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('POSTGRES_DB'),
        'USER': os.environ.get('POSTGRES_USER'),
        'PASSWORD': os.environ.get('POSTGRES_PASSWORD'),
        'HOST': os.environ.get('POSTGRES_HOST', 'db'),
        'PORT': os.environ.get('POSTGRES_PORT', '5432'),
    }
}

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LANGUAGE_CODE = 'es'
TIME_ZONE = 'America/Bogota'
USE_I18N = True
USE_TZ = True

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR.parent / 'staticfiles'
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = os.environ.get('EMAIL_HOST', 'smtp.office365.com')
EMAIL_PORT = int(os.environ.get('EMAIL_PORT', 587))
EMAIL_USE_TLS = True


# --- CONFIGURACIÓN PARA AUTENTICACIÓN LDAP con verificación de actividad ---

# Carga explícita del .env (por si acaso)
from dotenv import load_dotenv
load_dotenv()

import logging
logger = logging.getLogger('django_auth_ldap')
logger.addHandler(logging.StreamHandler())
logger.setLevel(logging.DEBUG)

import ldap
from django_auth_ldap.config import LDAPSearch, GroupOfNamesType

# Variables de entorno LDAP
AUTH_LDAP_SERVER_URI = f"ldap://{os.environ.get('LDAP_SERVER')}:{os.environ.get('LDAP_PORT', '389')}"
AUTH_LDAP_BIND_DN = os.environ.get('LDAP_BIND_USER_DN')
AUTH_LDAP_BIND_PASSWORD = os.environ.get('LDAP_BIND_PASSWORD')

# Validación de variables de entorno
if not AUTH_LDAP_SERVER_URI or not AUTH_LDAP_BIND_DN or not AUTH_LDAP_BIND_PASSWORD:
    print("[ERROR] Faltan variables de entorno LDAP. Revisa tu archivo .env")
    print(f"AUTH_LDAP_SERVER_URI: {AUTH_LDAP_SERVER_URI}")
    print(f"AUTH_LDAP_BIND_DN: {AUTH_LDAP_BIND_DN}")
    print(f"AUTH_LDAP_BIND_PASSWORD: {'***' if AUTH_LDAP_BIND_PASSWORD else None}")

AUTH_LDAP_USER_SEARCH = LDAPSearch(
    os.environ.get('LDAP_BASE_DN'),
    2,  # 2 equivale a ldap.SCOPE_SUBTREE
    '(sAMAccountName=%(user)s)'
)

AUTH_LDAP_USER_ATTR_MAP = {
    "first_name": "givenName",
    "last_name": "sn",
    "email": "mail",
}

AUTH_LDAP_GROUP_SEARCH = LDAPSearch(
    os.getenv('LDAP_BASE_DN'),  # Puedes cambiar esto si tienes un DN específico para grupos
    2,
    '(objectClass=group)'
)
AUTH_LDAP_GROUP_TYPE = GroupOfNamesType()

AUTH_LDAP_USER_FLAGS_BY_GROUP = {
    # Cambia este DN por el del grupo de usuarios activos si es diferente
    "is_active": 'CN=Usuarios,OU=Usuarios,OU=01 - GRUPODECOR,DC=grupodecor,DC=local',
}

AUTH_LDAP_ALWAYS_UPDATE_USER = True
AUTHENTICATION_BACKENDS = [
    'django_auth_ldap.backend.LDAPBackend',
    'django.contrib.auth.backends.ModelBackend',
]

# --- Configuración para Django REST Framework y JWT ---
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
}

from datetime import timedelta

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_ENABLED': True,
}

# --- Configuración de Logging para depuración LDAP ---
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django_auth_ldap': {
            'handlers': ['console'],
            'level': 'DEBUG', #DEBUG para las pruebas
            'propagate': False,
        },
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
        },
    },
}

logger = logging.getLogger('django_auth_ldap')
logger.addHandler(logging.StreamHandler())
logger.setLevel(logging.DEBUG)
