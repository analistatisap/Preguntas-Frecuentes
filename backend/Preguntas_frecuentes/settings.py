"""
Django settings for Preguntas_frecuentes project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
from pathlib import Path
import os
from dotenv import load_dotenv
from django_auth_ldap.config import LDAPSearch, GroupOfNamesType # Necesitamos GroupOfNamesType ahora
import logging
from ldap3 import SUBTREE

load_dotenv()

BASE_DIR = Path(__file__).resolve().parent.parent

DEBUG = True

SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-default-development-key-placeholder')

ALLOWED_HOSTS = ['*'] # ¡Cambiar para producción!

EMAIL_HOST_USER = 'notificacionesaplicativoweb@grupodecor.com'
EMAIL_HOST_PASSWORD = '1Ngr3s0W3b2024*'
DEFAULT_FROM_EMAIL = 'notificacionesaplicativoweb@grupodecor.com'


# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'contacto',
    'corsheaders',
    'rest_framework_simplejwt',
    'django_auth_ldap',
    'recursos',
    'api',
    'rest_framework',
    'rest_framework.authtoken',
]

# Configuración de CORS
CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",
    "http://172.16.29.5:3000",
    # "https://tu_frontend_en_produccion.com",
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'Preguntas_frecuentes.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Preguntas_frecuentes.wsgi.application'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR.parent / 'staticfiles'
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = os.environ.get('EMAIL_HOST', 'smtp.office365.com')
EMAIL_PORT = int(os.environ.get('EMAIL_PORT', 587))
EMAIL_USE_TLS = True


# --- CONFIGURACIÓN PARA AUTENTICACIÓN LDAP con verificación de actividad ---

#LDAPS (seguro): 'ldaps://10.10.10.4:636'
AUTH_LDAP_SERVER_URI = 'ldap://10.10.10.4:389'

# Credenciales del usuario de servicio para el bind (lectura del AD)
AUTH_LDAP_BIND_DN = 'CN=jagrajales,OU=Usuarios,DC=grupodecor,DC=local'
AUTH_LDAP_BIND_PASSWORD = 'contraseña de servicio' 

# Base DN (Distinguished Name) donde buscar usuarios
# Asegúrate de que esta ruta sea 100% correcta y contenga a tus usuarios.
AUTH_LDAP_USER_SEARCH = LDAPSearch(
    'OU=Usuarios,OU=01 - GRUPODECOR,DC=grupodecor,DC=local',
    SUBTREE,
    '(sAMAccountName=%(user)s)'
)

# Mapea atributos de AD a campos del modelo de usuario de Django (opcional, pero recomendado)
AUTH_LDAP_USER_ATTR_MAP = {
    "first_name": "givenName",
    "last_name": "sn",
    "email": "mail",
}

# --- Configuración de Grupos para verificar actividad ---

# Base DN donde se encuentran tus grupos.
# ¡REEMPLAZA con el DN que te dé el equipo de AD donde están los grupos relevantes!
# Este es necesario para que Django pueda evaluar la membresía del grupo de "usuarios activos".
AUTH_LDAP_GROUP_SEARCH = LDAPSearch(
    'OU=Usuarios,OU=01 - GRUPODECOR,DC=grupodecor,DC=local', #falta por confirmar
    SUBTREE,
    '(objectClass=group)'
)
AUTH_LDAP_GROUP_TYPE = GroupOfNamesType()

# Aquí es donde se define qué grupo de AD indica que el usuario está "activo".
# Si el usuario NO pertenece a este grupo, django.contrib.auth.authenticate()
# establecerá user.is_active = False, impidiendo el login.
AUTH_LDAP_USER_FLAGS_BY_GROUP = {
    "is_active": 'CN=Usuarios,OU=Usuarios,OU=01 - GRUPODECOR,DC=grupodecor,DC=local', # DN DE GRUPO DE USUARIOS ACTIVOS
}

# Estas opciones controlan la actualización y el reflejo de grupos.
# AUTH_LDAP_MIRROR_GROUPS = False # No reflejar todos los grupos en Django si no se necesita permisos.
# AUTH_LDAP_FIND_GROUP_PERMS = False # No busqa permisos granulares de grupo.

AUTH_LDAP_ALWAYS_UPDATE_USER = True # Actualiza el perfil del usuario en Django en cada login
AUTHENTICATION_BACKENDS = [
    'django_auth_ldap.backend.LDAPBackend',
    'django.contrib.auth.backends.ModelBackend',
]

# --- Configuración para Django REST Framework y JWT ---
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
}

from datetime import timedelta

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_ENABLED': True,
}

# --- Configuración de Logging para depuración LDAP ---
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django_auth_ldap': {
            'handlers': ['console'],
            'level': 'DEBUG', #DEBUG para las pruebas
            'propagate': False,
        },
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
        },
    },
}
